################################################################################################################################################################
#Copyright <2019> <Akinori Haruki> <e-mail:harumensys@gmail.com>
#Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
#THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
###############################################################################################################################################################

###############################################################################################################################################################
#This class is based on a simple model of neural network.
#The model is the recognition of sound by the human ear.
#This class that can be used to recognize changes over time in human nerves.
#To simulate the human optic nerve, one class is required per pixel.
#
# EX.Image is neural network being used.
#
#                            (DATA OUT)
#                            /
#                     /~~~~~O
#                    /      |
#                   O       O
#                  /|      /|
#                 O O     O O
#                /  |    /  |
#               O   O   O   O
#              /|  /|  /|  /|
#   (DATA IN)-O-O-O-O-O-O-O-O  <= class argument is 8.
#
###############################################################################################################################################################

###############################################################################################################################################################
# class LookForDataList : Class to calculate input value in time series.
# argument 1            : Number of input neural networks.
#
# When using the set2get function, data of the same size and type as the specified argument will be output.
###############################################################################################################################################################
class LookForDataList:
	def __init__(self, size_neural=0):
		self.StackUpDataListSizeNeural = size_neural
		self.StackUpDataList=[]
	
	def set2get(self, get_list):
		if(self.StackUpDataListSizeNeural != 0):
			for num in range(self.StackUpDataListSizeNeural*2, len(self.StackUpDataList)):
				self.StackUpDataList.pop(0)
			if((type(get_list) is int) or (type(get_list) is  float)):
				for num in range(len(self.StackUpDataList), self.StackUpDataListSizeNeural*2):
					self.StackUpDataList.append(0)
				self.StackUpDataList.append(get_list)
				return(sum(self.StackUpDataList[-self.StackUpDataListSizeNeural:]))
			elif(type(get_list) is list):
				for num in range(len(self.StackUpDataList)+len(get_list), self.StackUpDataListSizeNeural*2):
					self.StackUpDataList.append(0)
				self.StackUpDataList.extend(get_list)
				ret_list=[]
				for num in reversed(range(len(get_list))):
					ret_list.append(sum(self.StackUpDataList[-num-self.StackUpDataListSizeNeural:len(self.StackUpDataList)-num]))
				return(ret_list)
			else:
				return(0)
		else:
			return(0)
